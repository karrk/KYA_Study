
가비지 컬렉터

가비지 컬렉터가 작동하는 방식
가비지 컬렉터는 동적으로 할당되는 영역인 힙 영역을 대상으로 가비지 컬렉터가 동작하게 된다.
힙 영역내의 모든 객체는 세대 라는 개념으로 분할 관리된다.

가비지 컬렉터의 세대 개념이란
총 3개 0,1,2 세대로 구분된다.

세대 0
새로 할당된 개체가 속하는 세대이다.
대부분의 개체는 이 구간에서 금방 메모리가 해제되며 가장 활발하게
GC 가 작동되는 구간이라고 보면 된다.

세대 2
오래동안 살아남은 개체들이 속한 세대이다.
GC 가 가장 적게 활동되는 구간이다.

0 부터 1, 2 순서대로 각 개체들의 유지 시간별로 나눠진다고 보면 되겠다.
이러한 세대 개념은 GC를 최적화하여 성능을 향상시키는 것이 목적이다.

세대 0의 경우 메모리 공간이 작기에 빠르게 수행이 된다.
이 구간에서는 가비지컬렉션이 자주 발생해도 성능에 큰 영향을 미치진 않는다.

오래 살아남은 개체는 적은 빈도로 관리되어 메모리 관리의 효율성을 높일 수 있게 된다.

자동적으로 메모리를 관리하는 가비지 컬렉터는 언제 동작할까

1.우선 힙에 더 이상 메모리를 할당할 수 없을때 공간을 만들기 위해 동작한다.
개체를 대량으로 생산하게 될경우 가비지컬렉터가 동작할 수 있음을 암시할 수 있겠다.

2.개발자의 호출
GC.Collect() 메서드를 통해 직접 동작을 요청할 수 있다.

3.일정 시간 경과
일정 시간이 경과한 경우 각 딜레이별로 가비지 컬렉터가 동작하게 된다.

어떤 과정이 진행되나

1. 마킹단계
가장 핵심적인 단계로 GC 가 모든 객체 중 여전히 사용되고 있는지 식별하는 과정이다.
루트 객체라는 뿌리가 되는 객체들로부터 루트 객체들이 참조하고 있는 객체를 찾는 과정을 거친다.

여기선 그래프의 구조로 루트 객체로 부터 이어지는 모든 객체를 마크 한다고 생각하면된다.
만약 마크가 되어있다면 이 객체는 사용중이고,
마크되어 있지 않다면 이 객체는 더 이상 참조되지 않는 객체로 간주된다.

2. 압축단계
세대 2를 제외한 사용중인(마킹된) 객체를 수집하게 된다.
마킹된 객체들은 아마 여기저기 흩어져 있을텐데, 이렇게 흩어진 조각들을
다시 연속된 메모리 형태로 정리하는 단계이다.

3. 스위핑단계
GC의 대상이 되는(마킹이 안된) 객체들을 해체하게 된다.
이때 2 압축단계로 인해 메모리 구조에 연속된 큰 메모리 공간 확보가 가능해진다.

4. 객체 승격
세대 0과 1에서 살아남은 객체들은 각자 다음 세대로 승격하게 되며
빈번하게 사용되고 있는 객체라는것을 알 수 있게한다.

가비지 컬렉터는 위의 과정을 반복하여 직접 메모리를 해제하는 작업을 하지 않아도 되게 해준다.